"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_ssr_node_modules_locomotive-scroll_dist_locomotive-scroll_modern_mjs";
exports.ids = ["_ssr_node_modules_locomotive-scroll_dist_locomotive-scroll_modern_mjs"];
exports.modules = {

/***/ "(ssr)/./node_modules/locomotive-scroll/dist/locomotive-scroll.modern.mjs":
/*!**************************************************************************!*\
  !*** ./node_modules/locomotive-scroll/dist/locomotive-scroll.modern.mjs ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ LocomotiveScroll)\n/* harmony export */ });\n/* harmony import */ var _studio_freight_lenis__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @studio-freight/lenis */ \"(ssr)/./node_modules/locomotive-scroll/node_modules/@studio-freight/lenis/dist/lenis.modern.mjs\");\n\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n/**\r\n * Intersection Observer\r\n *\r\n * Detecting visibility of an element in the viewport.\r\n *\r\n * Features functions to:\r\n *\r\n * - Trigger inview/outOfView callbacks\r\n * - If the element has a requestAnimationFrame dependency, set interactivy status for the ScrollElement Class\r\n *\r\n * References:\r\n *\r\n * - {@link https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API}\r\n */\nclass IO {\n  constructor({\n    scrollElements,\n    rootMargin = '-1px -1px -1px -1px',\n    IORaf\n  }) {\n    this.scrollElements = void 0;\n    this.rootMargin = void 0;\n    this.IORaf = void 0;\n    this.observer = void 0;\n    // Parameters\n    this.scrollElements = scrollElements;\n    this.rootMargin = rootMargin;\n    this.IORaf = IORaf;\n    // Init\n    this._init();\n  }\n  /**\r\n   * Lifecyle - Initialize Intersection Observer.\r\n   *\r\n   * @private\r\n   */\n  _init() {\n    // Options\n    const observerOptions = {\n      rootMargin: this.rootMargin\n    };\n    // Callback\n    const onIntersect = entries => {\n      entries.forEach(entry => {\n        const $targetItem = this.scrollElements.find(item => item.$el === entry.target);\n        if (entry.isIntersecting) {\n          $targetItem && ($targetItem.isAlreadyIntersected = true);\n          this._setInview(entry);\n        } else if ($targetItem && $targetItem.isAlreadyIntersected) {\n          this._setOutOfView(entry);\n        }\n      });\n    };\n    // Instance\n    this.observer = new IntersectionObserver(onIntersect, observerOptions);\n    // Observe each default elements\n    for (const scrollElement of this.scrollElements) {\n      const $scrollElement = scrollElement.$el;\n      this.observe($scrollElement);\n    }\n  }\n  /**\r\n   * Lifecyle - Destroy Intersection Observer.\r\n   */\n  destroy() {\n    this.observer.disconnect();\n  }\n  /**\r\n   * Subscribe element to the Intersection Observer.\r\n   *\r\n   * @param {HTMLElement} $scrollElement - DOM Element to observe.\r\n   */\n  observe($scrollElement) {\n    if (!$scrollElement) {\n      return;\n    }\n    this.observer.observe($scrollElement);\n  }\n  /**\r\n   * Unsubscribe element to the Intersection Observer.\r\n   *\r\n   * @param {HTMLElement} $scrollElement - DOM Element to unobserve.\r\n   */\n  unobserve($scrollElement) {\n    if (!$scrollElement) {\n      return;\n    }\n    this.observer.unobserve($scrollElement);\n  }\n  /**\r\n   * Find ScrollElementReference instance and trigger inview callbacks.\r\n   *\r\n   * @private\r\n   *\r\n   * @param {IntersectionObserverEntry} entry - DOM Element to observe.\r\n   */\n  _setInview(entry) {\n    const scrollElement = this.scrollElements.find(scrollElement => scrollElement.$el === entry.target);\n    this.IORaf && (scrollElement == null ? void 0 : scrollElement.setInteractivityOn());\n    !this.IORaf && (scrollElement == null ? void 0 : scrollElement.setInview());\n  }\n  /**\r\n   * Find ScrollElementReference instance and trigger out of view callbacks.\r\n   *\r\n   * @private\r\n   *\r\n   * @param {IntersectionObserverEntry} entry - DOM Element to observe.\r\n   */\n  _setOutOfView(entry) {\n    const scrollElement = this.scrollElements.find(scrollElement => scrollElement.$el === entry.target);\n    this.IORaf && (scrollElement == null ? void 0 : scrollElement.setInteractivityOff());\n    !this.IORaf && (scrollElement == null ? void 0 : scrollElement.setOutOfView());\n    // Unobserve if element doesn't have repeat attribute\n    if (!(scrollElement != null && scrollElement.attributes.scrollRepeat) && !this.IORaf) {\n      this.unobserve(entry.target);\n    }\n  }\n}\n\n// https://greensock.com/docs/v3/GSAP/gsap.utils\n/**\r\n * Clamp a value to fit within a specific range (ex: clamp(0, 100, -12) --> 0).\r\n *\r\n * @param {number} min   - Minimum value expected.\r\n * @param {number} max   - Maximum value expected.\r\n * @param {number} value - Current value.\r\n *\r\n * @returns {number} - Clamped value.\r\n */\nfunction clamp(min, max, value) {\n  return value < min ? min : value > max ? max : value;\n}\n/**\r\n * Map one range to another (ex: mapRange(-10, 10, 0, 100, 5) --> 75).\r\n *\r\n * @param {number} inMin  - Current minimum value.\r\n * @param {number} inMax  - Current maximum value.\r\n * @param {number} outMin - Maximum value expected.\r\n * @param {number} outMax - Maximum value expected.\r\n * @param {number} value  - Current value.\r\n *\r\n * @returns {number} - New value that should be between minimum value expected and maximum value.\r\n */\nfunction mapRange(inMin, inMax, outMin, outMax, value) {\n  const inRange = inMax - inMin;\n  const outRange = outMax - outMin;\n  return outMin + ((value - inMin) / inRange * outRange || 0);\n}\n/**\r\n * Map a number within a range to a progress between 0 to 1 (ex: normalize(100, 200, 150) --> 0.5).\r\n *\r\n * @param {number} min   - Current minimum value.\r\n * @param {number} max   - Current maximum value.\r\n * @param {number} value - Current value.\r\n *\r\n * @returns {number} - New value that should be between 0 and 1.\r\n */\nfunction normalize(min, max, value) {\n  return mapRange(min, max, 0, 1, value);\n}\n/**\r\n * Get closest number from an array.\r\n *\r\n * @param {number[]} array  - Numbers array.\r\n * @param {number}   target - Reference value.\r\n *\r\n * @returns {number} - Closest number.\r\n */\nfunction closestNumber(array, target) {\n  return array.reduce((prev, curr) => {\n    return Math.abs(curr - target) < Math.abs(prev - target) ? curr : prev;\n  });\n}\n\n/**\r\n * Scroll Element\r\n *\r\n * Give tools to compute element progress in the viewport and triggers callbacks to animate it.\r\n *\r\n * Features functions to:\r\n *\r\n * - scrollClass - Add a custom class when the element is intersected by the offset\r\n * - scrollOffset - Determine offsets to intersect the element\r\n * - scrollPosition - Determine the element positions to consider an element as intersected.\r\n * - scrollModuleProgress - Send scroll progress to modular module that have a specific method (PROGRESS_MODULAR_METHOD)\r\n * - scrollCssProgress - Add a specific css variable (PROGRESS_CSS_VAR) that store the scroll progress\r\n * - scrollEventProgress - Send scroll progress to custom event listeners.\r\n * - scrollSpeed - Add a scroll multiplicator to create a parallax effect\r\n * - scrollRepeat - Repeat the option to trigger animation each time the element is intersected\r\n * - scrollCall - Call a custom event or a modular callback when the element is intersected\r\n */\n/** Constants */\nconst INVIEW_CLASS = 'is-inview';\nconst PROGRESS_CSS_VAR = '--progress';\nconst PROGRESS_MODULAR_METHOD = 'onScrollProgress';\nclass ScrollElement {\n  constructor({\n    $el,\n    id,\n    modularInstance,\n    subscribeElementUpdateFn,\n    unsubscribeElementUpdateFn,\n    needRaf,\n    scrollOrientation\n  }) {\n    var _this$$el$dataset$scr, _this$$el$dataset$scr2, _this$$el$dataset$scr3, _this$$el$dataset$scr4, _this$$el$dataset$scr5;\n    this.$el = void 0;\n    this.id = void 0;\n    this.needRaf = void 0;\n    this.attributes = void 0;\n    this.scrollOrientation = void 0;\n    this.isAlreadyIntersected = void 0;\n    this.intersection = void 0;\n    this.metrics = void 0;\n    this.currentScroll = void 0;\n    this.translateValue = void 0;\n    this.progress = void 0;\n    this.lastProgress = void 0;\n    this.modularInstance = void 0;\n    this.progressModularModules = void 0;\n    this.isInview = void 0;\n    this.isInteractive = void 0;\n    this.isInFold = void 0;\n    this.isFirstResize = void 0;\n    this.subscribeElementUpdateFn = void 0;\n    this.unsubscribeElementUpdateFn = void 0;\n    // Scroll DOM element\n    this.$el = $el;\n    // Unique ID\n    this.id = id;\n    // RAF option\n    this.needRaf = needRaf;\n    // Scroll Direction\n    this.scrollOrientation = scrollOrientation;\n    // Modular.js\n    this.modularInstance = modularInstance;\n    // Parent's callbacks\n    this.subscribeElementUpdateFn = subscribeElementUpdateFn;\n    this.unsubscribeElementUpdateFn = unsubscribeElementUpdateFn;\n    // Attributes\n    this.attributes = {\n      scrollClass: (_this$$el$dataset$scr = this.$el.dataset['scrollClass']) != null ? _this$$el$dataset$scr : INVIEW_CLASS,\n      scrollOffset: (_this$$el$dataset$scr2 = this.$el.dataset['scrollOffset']) != null ? _this$$el$dataset$scr2 : '0,0',\n      scrollPosition: (_this$$el$dataset$scr3 = this.$el.dataset['scrollPosition']) != null ? _this$$el$dataset$scr3 : 'start,end',\n      scrollModuleProgress: this.$el.dataset['scrollModuleProgress'] != null,\n      scrollCssProgress: this.$el.dataset['scrollCssProgress'] != null,\n      scrollEventProgress: (_this$$el$dataset$scr4 = this.$el.dataset['scrollEventProgress']) != null ? _this$$el$dataset$scr4 : null,\n      scrollSpeed: this.$el.dataset['scrollSpeed'] != null ? parseFloat(this.$el.dataset['scrollSpeed']) : null,\n      scrollRepeat: this.$el.dataset['scrollRepeat'] != null,\n      scrollCall: (_this$$el$dataset$scr5 = this.$el.dataset['scrollCall']) != null ? _this$$el$dataset$scr5 : null,\n      scrollCallSelf: this.$el.dataset['scrollCallSelf'] != null,\n      scrollIgnoreFold: this.$el.dataset['scrollIgnoreFold'] != null,\n      scrollEnableTouchSpeed: this.$el.dataset['scrollEnableTouchSpeed'] != null\n    };\n    // Limits\n    this.intersection = {\n      start: 0,\n      end: 0\n    };\n    // Metrics\n    this.metrics = {\n      offsetStart: 0,\n      offsetEnd: 0,\n      bcr: {}\n    };\n    // Scroll Values\n    this.currentScroll = this.scrollOrientation === 'vertical' ? window.scrollY : window.scrollX;\n    // Parallax\n    this.translateValue = 0;\n    // Progress\n    this.progress = 0;\n    this.lastProgress = null;\n    this.progressModularModules = [];\n    // Inview\n    this.isInview = false;\n    this.isInteractive = false;\n    this.isAlreadyIntersected = false;\n    this.isInFold = false;\n    this.isFirstResize = true;\n    // Init\n    this._init();\n  }\n  /**\r\n   * Lifecyle - Initialize progress tracking.\r\n   *\r\n   * @private\r\n   */\n  _init() {\n    if (!this.needRaf) {\n      return;\n    }\n    // Prepare modules progress\n    if (this.modularInstance && this.attributes.scrollModuleProgress) {\n      this._getProgressModularModules();\n    }\n    // First resize to compute all values\n    this._resize();\n  }\n  /**\r\n   * Callback - Resize callback\r\n   */\n  onResize({\n    currentScroll\n  }) {\n    this.currentScroll = currentScroll;\n    this._resize();\n  }\n  /**\r\n   * Callback - RAF callback\r\n   */\n  onRender({\n    currentScroll,\n    smooth\n  }) {\n    const wSize = this.scrollOrientation === 'vertical' ? window.innerHeight : window.innerWidth;\n    this.currentScroll = currentScroll;\n    this._computeProgress();\n    // Parallax\n    if (this.attributes.scrollSpeed && !isNaN(this.attributes.scrollSpeed)) {\n      // if touch detected or smooth disabled\n      if (!this.attributes.scrollEnableTouchSpeed && !smooth) {\n        if (this.translateValue) {\n          this.$el.style.transform = `translate3d(0, 0, 0)`;\n        }\n        this.translateValue = 0;\n        // if mousewheel or smooth enabled\n      } else {\n        // Check fold condition\n        if (this.isInFold) {\n          const progress = Math.max(0, this.progress);\n          this.translateValue = progress * wSize * this.attributes.scrollSpeed * -1;\n        } else {\n          const progress = mapRange(0, 1, -1, 1, this.progress);\n          this.translateValue = progress * wSize * this.attributes.scrollSpeed * -1;\n        }\n        this.$el.style.transform = this.scrollOrientation === 'vertical' ? `translate3d(0, ${this.translateValue}px, 0)` : `translate3d(${this.translateValue}px, 0, 0)`;\n      }\n    }\n  }\n  /**\r\n   * Inview callback\r\n   */\n  setInview() {\n    if (this.isInview) {\n      return;\n    }\n    this.isInview = true;\n    this.$el.classList.add(this.attributes.scrollClass);\n    const way = 'enter';\n    const from = this._getScrollCallFrom();\n    this.attributes.scrollCall && this._dispatchCall(way, from);\n  }\n  /**\r\n   * Out of view callback\r\n   */\n  setOutOfView() {\n    if (!(this.isInview && this.attributes.scrollRepeat)) {\n      return;\n    }\n    this.isInview = false;\n    this.$el.classList.remove(this.attributes.scrollClass);\n    const way = 'leave';\n    const from = this._getScrollCallFrom();\n    this.attributes.scrollCall && this._dispatchCall(way, from);\n  }\n  /**\r\n   * Switch interactivity on to subscribe the instance to the RAF\r\n   * and start calculations.\r\n   */\n  setInteractivityOn() {\n    if (this.isInteractive) {\n      return;\n    }\n    this.isInteractive = true;\n    this.subscribeElementUpdateFn(this);\n  }\n  /**\r\n   * Switch interactivity off to unsubscribe the instance to the RAF\r\n   * and stop calculations.\r\n   */\n  setInteractivityOff() {\n    if (!this.isInteractive) {\n      return;\n    }\n    this.isInteractive = false;\n    this.unsubscribeElementUpdateFn(this);\n    // Force progress to progress limit when the element is out\n    this.lastProgress != null && this._computeProgress(closestNumber([0, 1], this.lastProgress));\n  }\n  /**\r\n   * Resize method that compute the element's values.\r\n   *\r\n   * @private\r\n   */\n  _resize() {\n    this.metrics.bcr = this.$el.getBoundingClientRect();\n    this._computeMetrics();\n    this._computeIntersection();\n    // First resize logic\n    if (this.isFirstResize) {\n      this.isFirstResize = false;\n      // Dispatch default call if the element is in fold.\n      if (this.isInFold) {\n        this.setInview();\n      }\n    }\n  }\n  /**\r\n   * Compute element's offsets and determine if the element is in fold.\r\n   *\r\n   * @private\r\n   */\n  _computeMetrics() {\n    const {\n      top,\n      left,\n      height,\n      width\n    } = this.metrics.bcr;\n    const wSize = this.scrollOrientation === 'vertical' ? window.innerHeight : window.innerWidth;\n    const metricsStart = this.scrollOrientation === 'vertical' ? top : left;\n    const metricsSize = this.scrollOrientation === 'vertical' ? height : width;\n    this.metrics.offsetStart = this.currentScroll + metricsStart - this.translateValue;\n    this.metrics.offsetEnd = this.metrics.offsetStart + metricsSize;\n    if (this.metrics.offsetStart < wSize && !this.attributes.scrollIgnoreFold) {\n      this.isInFold = true;\n    } else {\n      this.isInFold = false;\n    }\n  }\n  /**\r\n   * Compute intersection values depending on the context.\r\n   *\r\n   * @private\r\n   */\n  _computeIntersection() {\n    // Window size\n    const wSize = this.scrollOrientation === 'vertical' ? window.innerHeight : window.innerWidth;\n    // Metrics size\n    const metricsSize = this.scrollOrientation === 'vertical' ? this.metrics.bcr.height : this.metrics.bcr.width;\n    // Offset\n    const offset = this.attributes.scrollOffset.split(',');\n    const offsetStart = offset[0] != undefined ? offset[0].trim() : '0';\n    const offsetEnd = offset[1] != undefined ? offset[1].trim() : '0';\n    // Positions\n    const scrollPosition = this.attributes.scrollPosition.split(',');\n    let scrollPositionStart = scrollPosition[0] != undefined ? scrollPosition[0].trim() : 'start';\n    const scrollPositionEnd = scrollPosition[1] != undefined ? scrollPosition[1].trim() : 'end';\n    // Viewport\n    const viewportStart = offsetStart.includes('%') ? wSize * parseInt(offsetStart.replace('%', '').trim()) * 0.01 : parseInt(offsetStart);\n    const viewportEnd = offsetEnd.includes('%') ? wSize * parseInt(offsetEnd.replace('%', '').trim()) * 0.01 : parseInt(offsetEnd);\n    // Fold exception\n    if (this.isInFold) {\n      scrollPositionStart = 'fold';\n    }\n    // Define Intersection Start\n    switch (scrollPositionStart) {\n      case 'start':\n        this.intersection.start = this.metrics.offsetStart - wSize + viewportStart;\n        break;\n      case 'middle':\n        this.intersection.start = this.metrics.offsetStart - wSize + viewportStart + metricsSize * 0.5;\n        break;\n      case 'end':\n        this.intersection.start = this.metrics.offsetStart - wSize + viewportStart + metricsSize;\n        break;\n      case 'fold':\n        this.intersection.start = 0;\n        break;\n      default:\n        this.intersection.start = this.metrics.offsetStart - wSize + viewportStart;\n        break;\n    }\n    // Define Intersection End\n    switch (scrollPositionEnd) {\n      case 'start':\n        this.intersection.end = this.metrics.offsetStart - viewportEnd;\n        break;\n      case 'middle':\n        this.intersection.end = this.metrics.offsetStart - viewportEnd + metricsSize * 0.5;\n        break;\n      case 'end':\n        this.intersection.end = this.metrics.offsetStart - viewportEnd + metricsSize;\n        break;\n      default:\n        this.intersection.end = this.metrics.offsetStart - viewportEnd + metricsSize;\n        break;\n    }\n    // Avoid to have the end < the start intersection >\n    if (this.intersection.end <= this.intersection.start) {\n      switch (scrollPositionEnd) {\n        case 'start':\n          this.intersection.end = this.intersection.start + 1;\n          break;\n        case 'middle':\n          this.intersection.end = this.intersection.start + metricsSize * 0.5;\n          break;\n        case 'end':\n          this.intersection.end = this.intersection.start + metricsSize;\n          break;\n        default:\n          this.intersection.end = this.intersection.start + 1;\n          break;\n      }\n    }\n  }\n  /**\r\n   * Compute the scroll progress of the element depending\r\n   * on its intersection values.\r\n   *\r\n   * @private\r\n   *\r\n   * @param {number} [forcedProgress] - Value to force progress.\r\n   */\n  _computeProgress(forcedProgress) {\n    // Progress\n    const progress = forcedProgress != null ? forcedProgress : clamp(0, 1, normalize(this.intersection.start, this.intersection.end, this.currentScroll));\n    this.progress = progress;\n    if (progress != this.lastProgress) {\n      this.lastProgress = progress;\n      // Set the element's progress to the css variable\n      this.attributes.scrollCssProgress && this._setCssProgress(progress);\n      // Set the element's progress to the custom event listeners\n      this.attributes.scrollEventProgress && this._setCustomEventProgress(progress);\n      // Set the element's progress to inline modules\n      if (this.attributes.scrollModuleProgress) {\n        for (const modularModules of this.progressModularModules) {\n          this.modularInstance && this.modularInstance.call(PROGRESS_MODULAR_METHOD, progress, modularModules.moduleName, modularModules.moduleId);\n        }\n      }\n      // Logic to trigger the inview/out of view callbacks\n      progress > 0 && progress < 1 && this.setInview();\n      progress === 0 && this.setOutOfView();\n      progress === 1 && this.setOutOfView();\n    }\n  }\n  /**\r\n   * Set the element's progress to a specific css variable.\r\n   *\r\n   * @private\r\n   *\r\n   * @param {number} [currentProgress] - Progress value.\r\n   */\n  _setCssProgress(currentProgress = 0) {\n    this.$el.style.setProperty(PROGRESS_CSS_VAR, currentProgress.toString());\n  }\n  /**\r\n   * Set the element's progress to the custom event listeners.\r\n   *\r\n   * @private\r\n   *\r\n   * @param {number} [currentProgress] - Progress value.\r\n   */\n  _setCustomEventProgress(currentProgress = 0) {\n    const customEventName = this.attributes.scrollEventProgress;\n    if (!customEventName) return;\n    const customEvent = new CustomEvent(customEventName, {\n      detail: {\n        target: this.$el,\n        progress: currentProgress\n      }\n    });\n    window.dispatchEvent(customEvent);\n  }\n  /**\r\n   * Get modular modules that can listen the element's progress.\r\n   *\r\n   * @private\r\n   */\n  _getProgressModularModules() {\n    if (!this.modularInstance) {\n      return;\n    }\n    const modulesIdNames = Object.keys(this.$el.dataset).filter(key => key.includes('module'));\n    const modules = Object.entries(this.modularInstance.modules);\n    if (!modulesIdNames.length) {\n      return;\n    }\n    for (const modulesIdName of modulesIdNames) {\n      const moduleId = this.$el.dataset[modulesIdName];\n      if (!moduleId) {\n        return;\n      }\n      for (const module of modules) {\n        const [moduleName, moduleObj] = module;\n        if (moduleId in moduleObj) {\n          this.progressModularModules.push({\n            moduleName,\n            moduleId\n          });\n        }\n      }\n    }\n  }\n  /**\r\n   * Function to get scroll call from.\r\n   *\r\n   * @private\r\n   */\n  _getScrollCallFrom() {\n    const closestIntersectionValue = closestNumber([this.intersection.start, this.intersection.end], this.currentScroll);\n    return this.intersection.start === closestIntersectionValue ? 'start' : 'end';\n  }\n  /**\r\n   * Function to dispatch a custom event or call a modular callback.\r\n   *\r\n   * @private\r\n   *\r\n   * @param {scrollCallWay} way - Enter or leave.\r\n   * @param {scrollCallFrom} from - Start or end.\r\n   */\n  _dispatchCall(way, from) {\n    var _this$attributes$scro, _this$attributes;\n    const callParameters = (_this$attributes$scro = this.attributes.scrollCall) == null ? void 0 : _this$attributes$scro.split(',');\n    const callSelf = (_this$attributes = this.attributes) == null ? void 0 : _this$attributes.scrollCallSelf;\n    if (callParameters && callParameters.length > 1) {\n      var _targetModuleId;\n      // Using Modular.js (https://github.com/modularorg/modularjs)\n      const [func, moduleName, moduleId] = callParameters;\n      let targetModuleId;\n      // If the module is set on the scroll element\n      if (callSelf) {\n        targetModuleId = this.$el.dataset[`module${moduleName.trim()}`];\n      } else {\n        targetModuleId = moduleId;\n      }\n      this.modularInstance && this.modularInstance.call(func.trim(), {\n        target: this.$el,\n        way,\n        from\n      }, moduleName.trim(), (_targetModuleId = targetModuleId) == null ? void 0 : _targetModuleId.trim());\n    } else if (callParameters) {\n      // Using CustomEvent API (https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent)\n      const [customEventName] = callParameters;\n      const customEvent = new CustomEvent(customEventName, {\n        detail: {\n          target: this.$el,\n          way,\n          from\n        }\n      });\n      window.dispatchEvent(customEvent);\n    }\n  }\n}\n\n/**\r\n * Integrates Lenis with Locomotive's built-in animation system\r\n */\n/** Defined attributes that need a requestAnimationFrame */\nconst ATTRIBUTES_THAT_NEED_RAF = ['scrollOffset', 'scrollPosition', 'scrollModuleProgress', 'scrollCssProgress', 'scrollEventProgress', 'scrollSpeed'];\n/** Default root margins */\nconst TRIGGER_ROOT_MARGIN = '-1px -1px -1px -1px';\nconst RAF_ROOT_MARGIN = '100% 100% 100% 100%'; // Add 100vh top/bottom && 100vw left/right to use a biggest value with data-scroll-speed\nclass Core {\n  constructor({\n    $el,\n    modularInstance,\n    triggerRootMargin,\n    rafRootMargin,\n    scrollOrientation\n  }) {\n    this.$scrollContainer = void 0;\n    this.modularInstance = void 0;\n    this.triggerRootMargin = void 0;\n    this.rafRootMargin = void 0;\n    this.scrollElements = void 0;\n    this.triggeredScrollElements = void 0;\n    this.RAFScrollElements = void 0;\n    this.scrollElementsToUpdate = void 0;\n    this.IOTriggerInstance = void 0;\n    this.IORafInstance = void 0;\n    this.scrollOrientation = void 0;\n    if (!$el) {\n      console.error('Please provide a DOM Element as scrollContainer');\n      return;\n    }\n    // Scroll container\n    this.$scrollContainer = $el;\n    // Modular.js\n    this.modularInstance = modularInstance;\n    // Scroll Direction\n    this.scrollOrientation = scrollOrientation;\n    // IO Margins\n    this.triggerRootMargin = triggerRootMargin != null ? triggerRootMargin : TRIGGER_ROOT_MARGIN;\n    this.rafRootMargin = rafRootMargin != null ? rafRootMargin : RAF_ROOT_MARGIN;\n    // ScrollElements arrays\n    this.scrollElements = [];\n    this.triggeredScrollElements = [];\n    this.RAFScrollElements = [];\n    this.scrollElementsToUpdate = [];\n    // Init\n    this._init();\n  }\n  /**\r\n   * Lifecyle - Initialize the core.\r\n   *\r\n   * @private\r\n   */\n  _init() {\n    const $scrollElements = this.$scrollContainer.querySelectorAll('[data-scroll]');\n    const $scrollElementsArr = Array.from($scrollElements);\n    this._subscribeScrollElements($scrollElementsArr);\n    // Trigger IO\n    this.IOTriggerInstance = new IO({\n      scrollElements: [...this.triggeredScrollElements],\n      rootMargin: this.triggerRootMargin,\n      IORaf: false\n    });\n    // Raf IO\n    this.IORafInstance = new IO({\n      scrollElements: [...this.RAFScrollElements],\n      rootMargin: this.rafRootMargin,\n      IORaf: true\n    });\n  }\n  /**\r\n   * Lifecyle - Destroy core.\r\n   */\n  destroy() {\n    this.IOTriggerInstance.destroy();\n    this.IORafInstance.destroy();\n    this._unsubscribeAllScrollElements();\n  }\n  /**\r\n   * Callback - Resize callback.\r\n   */\n  onResize({\n    currentScroll\n  }) {\n    for (const scrollElement of this.RAFScrollElements) {\n      scrollElement.onResize({\n        currentScroll\n      });\n    }\n  }\n  /**\r\n   * Callback - RAF callback.\r\n   */\n  onRender({\n    currentScroll,\n    smooth\n  }) {\n    for (const scrollElement of this.scrollElementsToUpdate) {\n      scrollElement.onRender({\n        currentScroll,\n        smooth\n      });\n    }\n  }\n  /**\r\n   * Remove items from lists of scroll elements and compute all new values.\r\n   *\r\n   * @param {HTMLElement} $oldContainer - HTMLElement that contains data-scroll elements to unsubscribe\r\n   */\n  removeScrollElements($oldContainer) {\n    const $scrollElementsToRemove = $oldContainer.querySelectorAll('[data-scroll]');\n    if (!$scrollElementsToRemove.length) return;\n    // 1. Remove from IO\n    for (let index = 0; index < this.triggeredScrollElements.length; index++) {\n      const scrollElement = this.triggeredScrollElements[index];\n      const $scrollElementsToRemoveArr = Array.from($scrollElementsToRemove);\n      if ($scrollElementsToRemoveArr.indexOf(scrollElement.$el) > -1) {\n        this.IOTriggerInstance.unobserve(scrollElement.$el);\n        this.triggeredScrollElements.splice(index, 1);\n      }\n    }\n    for (let index = 0; index < this.RAFScrollElements.length; index++) {\n      const scrollElement = this.RAFScrollElements[index];\n      const $scrollElementsToRemoveArr = Array.from($scrollElementsToRemove);\n      if ($scrollElementsToRemoveArr.indexOf(scrollElement.$el) > -1) {\n        this.IORafInstance.unobserve(scrollElement.$el);\n        this.RAFScrollElements.splice(index, 1);\n      }\n    }\n    // 2. Remove from scrollElementsToUpdate[] and scrollElements[]\n    $scrollElementsToRemove.forEach($scrollElement => {\n      const targetScrollElementToUpdate = this.scrollElementsToUpdate.find(scrollElement => scrollElement.$el === $scrollElement);\n      const targetScrollElement = this.scrollElements.find(scrollElement => scrollElement.$el === $scrollElement);\n      if (targetScrollElementToUpdate) {\n        this._unsubscribeElementUpdate(targetScrollElementToUpdate);\n      }\n      if (targetScrollElement) {\n        this.scrollElements = this.scrollElements.filter(scrollElementItem => scrollElementItem.id != targetScrollElement.id);\n      }\n    });\n  }\n  /**\r\n   * Add items to lists of scroll elements and compute all new values.\r\n   *\r\n   * @param {HTMLElement} $newContainer - HTMLElement that contains data-scroll elements to subscribe\r\n   */\n  addScrollElements($newContainer) {\n    // 3. Rebuild ScrollElements\n    const $scrollElements = $newContainer.querySelectorAll('[data-scroll]');\n    // 4. Get max scrollElement.id\n    const ids = [];\n    this.scrollElements.forEach(scrollElement => {\n      ids.push(scrollElement.id);\n    });\n    const maxID = Math.max(...ids);\n    const fromIndex = maxID + 1;\n    const $scrollElementsArr = Array.from($scrollElements);\n    this._subscribeScrollElements($scrollElementsArr, fromIndex, true);\n  }\n  /**\r\n   * Create a ScrollElement instance for each elements with\r\n   * `data-scroll` attribute.\r\n   *\r\n   * @private\r\n   *\r\n   * @param {HTMLElement[]} $scrollElements - List of elements that need\r\n   *     to be regarded.\r\n   */\n  _subscribeScrollElements($scrollElements, fromIndex = 0, toObserve = false) {\n    // For each scroll element create a ScrollElement instance\n    for (let index = 0; index < $scrollElements.length; index++) {\n      const $scrollElement = $scrollElements[index];\n      const needRaf = this._checkRafNeeded($scrollElement);\n      const scrollElementInstance = new ScrollElement({\n        $el: $scrollElement,\n        id: fromIndex + index,\n        scrollOrientation: this.scrollOrientation,\n        modularInstance: this.modularInstance,\n        subscribeElementUpdateFn: this._subscribeElementUpdate.bind(this),\n        unsubscribeElementUpdateFn: this._unsubscribeElementUpdate.bind(this),\n        needRaf\n      });\n      // Push to common array\n      this.scrollElements.push(scrollElementInstance);\n      // Push to specific array\n      if (needRaf) {\n        this.RAFScrollElements.push(scrollElementInstance);\n        // Dynamic observe item\n        if (toObserve) {\n          this.IORafInstance.scrollElements.push(scrollElementInstance);\n          this.IORafInstance.observe(scrollElementInstance.$el);\n        }\n      } else {\n        this.triggeredScrollElements.push(scrollElementInstance);\n        // Dynamic observe item\n        if (toObserve) {\n          this.IOTriggerInstance.scrollElements.push(scrollElementInstance);\n          this.IOTriggerInstance.observe(scrollElementInstance.$el);\n        }\n      }\n    }\n  }\n  /**\r\n   * Clear all ScrollElement arrays.\r\n   *\r\n   * @private\r\n   */\n  _unsubscribeAllScrollElements() {\n    this.scrollElements = [];\n    this.RAFScrollElements = [];\n    this.triggeredScrollElements = [];\n    this.scrollElementsToUpdate = [];\n  }\n  /**\r\n   * Subscribe ScrollElement instance that needs to be updated.\r\n   *\r\n   * @private\r\n   *\r\n   * @param {ScrollElement} scrollElement - ScrollElement instance inview\r\n   *     that needs to be updated.\r\n   */\n  _subscribeElementUpdate(scrollElement) {\n    this.scrollElementsToUpdate.push(scrollElement);\n  }\n  /**\r\n   * Unscribe ScrollElement instance that doesn't need to be updated.\r\n   *\r\n   * @private\r\n   *\r\n   * @param {ScrollElement} scrollElement - The updated ScrollElement instance\r\n   *     out of view now.\r\n   */\n  _unsubscribeElementUpdate(scrollElement) {\n    this.scrollElementsToUpdate = this.scrollElementsToUpdate.filter(scrollElementToUpdate => scrollElementToUpdate.id != scrollElement.id);\n  }\n  /**\r\n   * Check if a DOM Element need a requestAnimationFrame to be used.\r\n   *\r\n   * @private\r\n   *\r\n   * @param {HTMLElement} $scrollElement - The element that needs to be checked.\r\n   *\r\n   * @returns {boolean}\r\n   */\n  _checkRafNeeded($scrollElement) {\n    let attributesThatNeedRaf = [...ATTRIBUTES_THAT_NEED_RAF];\n    // Remove utils\n    const removeAttribute = attributeToRemove => {\n      attributesThatNeedRaf = attributesThatNeedRaf.filter(attribute => attribute != attributeToRemove);\n    };\n    // 1. Check scroll offset values\n    if ($scrollElement.dataset.scrollOffset) {\n      const value = $scrollElement.dataset.scrollOffset.split(',').map(test => test.replace('%', '').trim()).join(',');\n      if (value != '0,0') {\n        return true;\n      } else {\n        removeAttribute('scrollOffset');\n      }\n    } else {\n      removeAttribute('scrollOffset');\n    }\n    // 2. Check scroll position values\n    if ($scrollElement.dataset.scrollPosition) {\n      const value = $scrollElement.dataset.scrollPosition.trim();\n      if (value != 'top,bottom') {\n        return true;\n      } else {\n        removeAttribute('scrollPosition');\n      }\n    } else {\n      removeAttribute('scrollPosition');\n    }\n    // 3. Check scroll speed values\n    if ($scrollElement.dataset.scrollSpeed && !isNaN(parseFloat($scrollElement.dataset.scrollSpeed))) {\n      return true;\n    } else {\n      removeAttribute('scrollSpeed');\n    }\n    // 4. Check others attributes\n    for (const attribute of attributesThatNeedRaf) {\n      if (attribute in $scrollElement.dataset) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n\n/**\r\n * Resize Observer\r\n *\r\n * The Resize Observer API provides a performant mechanism by which code can monitor an element for changes to its size,\r\n * with notifications being delivered to the observer each time the size changes.\r\n *\r\n * Features functions to:\r\n *\r\n * - Trigger the resize callback if the specified element's size change.\r\n *\r\n * References:\r\n *\r\n * - {@link https://developer.mozilla.org/en-US/docs/Web/API/Resize_Observer_API}\r\n */\nclass RO {\n  constructor({\n    resizeElements,\n    resizeCallback = () => {}\n  }) {\n    this.$resizeElements = void 0;\n    this.isFirstObserve = void 0;\n    this.observer = void 0;\n    this.resizeCallback = void 0;\n    // Parameters\n    this.$resizeElements = resizeElements;\n    this.resizeCallback = resizeCallback;\n    // Flags\n    this.isFirstObserve = true;\n    // Init\n    this._init();\n  }\n  /**\r\n   * Lifecyle - Initialize Resize Observer.\r\n   *\r\n   * @private\r\n   */\n  _init() {\n    // Callback\n    const onResize = entries => {\n      var _this$resizeCallback;\n      !this.isFirstObserve && ((_this$resizeCallback = this.resizeCallback) == null ? void 0 : _this$resizeCallback.call(this));\n      this.isFirstObserve = false;\n    };\n    // Instance\n    this.observer = new ResizeObserver(onResize);\n    // Observe each default elements\n    for (const $resizeElement of this.$resizeElements) {\n      this.observer.observe($resizeElement);\n    }\n  }\n  /**\r\n   * Lifecyle - Destroy Resize Observer.\r\n   */\n  destroy() {\n    this.observer.disconnect();\n  }\n}\n\n/**\r\n * @type {ILenisOptions}\r\n */\nconst defaultLenisOptions = {\n  wrapper: window,\n  content: document.documentElement,\n  lerp: 0.1,\n  duration: 1.2,\n  orientation: 'vertical',\n  gestureOrientation: 'vertical',\n  smoothWheel: true,\n  smoothTouch: false,\n  wheelMultiplier: 1,\n  touchMultiplier: 2,\n  normalizeWheel: true,\n  easing: t => Math.min(1, 1.001 - Math.pow(2, -10 * t)) // https://www.desmos.com/calculator/brs54l4xou\n};\n/**\r\n * Locomotive Scroll\r\n *\r\n * Detection of elements in viewport & smooth scrolling with parallax.\r\n *\r\n * Inspired by\r\n * {@link https://github.com/locomotivemtl/locomotive-scroll locomotive-scroll.js}\r\n * and built around\r\n * {@link https://github.com/studio-freight/lenis lenis.js}.\r\n */\nclass LocomotiveScroll {\n  constructor({\n    lenisOptions = {},\n    modularInstance,\n    triggerRootMargin,\n    rafRootMargin,\n    autoResize = true,\n    autoStart = true,\n    scrollCallback = () => {},\n    initCustomTicker,\n    destroyCustomTicker\n  } = {}) {\n    this.rafPlaying = void 0;\n    this.lenisInstance = void 0;\n    this.coreInstance = void 0;\n    this.lenisOptions = void 0;\n    this.modularInstance = void 0;\n    this.triggerRootMargin = void 0;\n    this.rafRootMargin = void 0;\n    this.rafInstance = void 0;\n    this.autoResize = void 0;\n    this.autoStart = void 0;\n    this.ROInstance = void 0;\n    this.initCustomTicker = void 0;\n    this.destroyCustomTicker = void 0;\n    this._onRenderBind = void 0;\n    this._onResizeBind = void 0;\n    this._onScrollToBind = void 0;\n    // Arguments\n    this.lenisOptions = _extends({}, defaultLenisOptions, lenisOptions);\n    Object.assign(this, {\n      lenisOptions,\n      modularInstance,\n      triggerRootMargin,\n      rafRootMargin,\n      autoResize,\n      autoStart,\n      scrollCallback,\n      initCustomTicker,\n      destroyCustomTicker\n    });\n    // Binding\n    this._onRenderBind = this._onRender.bind(this);\n    this._onScrollToBind = this._onScrollTo.bind(this);\n    this._onResizeBind = this._onResize.bind(this);\n    // Data\n    this.rafPlaying = false;\n    // Init\n    this._init();\n  }\n  /**\r\n   * Lifecyle - Initialize instance.\r\n   *\r\n   * @private\r\n   */\n  _init() {\n    var _this$lenisInstance;\n    // Create Lenis instance\n    this.lenisInstance = new _studio_freight_lenis__WEBPACK_IMPORTED_MODULE_0__[\"default\"]({\n      wrapper: this.lenisOptions.wrapper,\n      content: this.lenisOptions.content,\n      lerp: this.lenisOptions.lerp,\n      duration: this.lenisOptions.duration,\n      orientation: this.lenisOptions.orientation,\n      gestureOrientation: this.lenisOptions.gestureOrientation,\n      smoothWheel: this.lenisOptions.smoothWheel,\n      smoothTouch: this.lenisOptions.smoothTouch,\n      wheelMultiplier: this.lenisOptions.wheelMultiplier,\n      touchMultiplier: this.lenisOptions.touchMultiplier,\n      normalizeWheel: this.lenisOptions.normalizeWheel,\n      easing: this.lenisOptions.easing\n    });\n    (_this$lenisInstance = this.lenisInstance) == null ? void 0 : _this$lenisInstance.on('scroll', this.scrollCallback);\n    // Add scroll direction attribute on body\n    document.documentElement.setAttribute('data-scroll-orientation', this.lenisInstance.options.orientation);\n    requestAnimationFrame(() => {\n      // Create Core Instance\n      this.coreInstance = new Core({\n        $el: this.lenisInstance.rootElement,\n        modularInstance: this.modularInstance,\n        triggerRootMargin: this.triggerRootMargin,\n        rafRootMargin: this.rafRootMargin,\n        scrollOrientation: this.lenisInstance.options.orientation\n      });\n      // Bind Events\n      this._bindEvents();\n      // RAF warning\n      if (this.initCustomTicker && !this.destroyCustomTicker) {\n        console.warn('initCustomTicker callback is declared, but destroyCustomTicker is not. Please pay attention. It could cause trouble.');\n      } else if (!this.initCustomTicker && this.destroyCustomTicker) {\n        console.warn('destroyCustomTicker callback is declared, but initCustomTicker is not. Please pay attention. It could cause trouble.');\n      }\n      // Start RAF\n      this.autoStart && this.start();\n    });\n  }\n  /**\r\n   * Lifecyle - Destroy instance.\r\n   */\n  destroy() {\n    // Stop raf\n    this.stop();\n    // Unbind Events\n    this._unbindEvents();\n    // Destroy Lenis\n    this.lenisInstance.destroy();\n    // Destroy Core\n    this.coreInstance.destroy();\n  }\n  /**\r\n   * Events - Subscribe events to listen.\r\n   */\n  _bindEvents() {\n    this._bindScrollToEvents();\n    if (this.autoResize) {\n      if ('ResizeObserver' in window) {\n        this.ROInstance = new RO({\n          resizeElements: [document.body],\n          resizeCallback: this._onResizeBind\n        });\n      } else {\n        window.addEventListener('resize', this._onResizeBind);\n      }\n    }\n  }\n  /**\r\n   * Events - Unsubscribe listened events.\r\n   */\n  _unbindEvents() {\n    this._unbindScrollToEvents();\n    if (this.autoResize) {\n      if ('ResizeObserver' in window) {\n        this.ROInstance && this.ROInstance.destroy();\n      } else {\n        window.removeEventListener('resize', this._onResizeBind);\n      }\n    }\n  }\n  /**\r\n   * Events - Subscribe scrollTo events to listen.\r\n   */\n  _bindScrollToEvents($container) {\n    const $rootContainer = $container ? $container : this.lenisInstance.rootElement;\n    const $scrollToElements = $rootContainer == null ? void 0 : $rootContainer.querySelectorAll('[data-scroll-to]');\n    ($scrollToElements == null ? void 0 : $scrollToElements.length) && $scrollToElements.forEach($el => {\n      $el.addEventListener('click', this._onScrollToBind, false);\n    });\n  }\n  /**\r\n   * Events - Unsubscribe scrollTo listened events.\r\n   */\n  _unbindScrollToEvents($container) {\n    const $rootContainer = $container ? $container : this.lenisInstance.rootElement;\n    const $scrollToElements = $rootContainer == null ? void 0 : $rootContainer.querySelectorAll('[data-scroll-to]');\n    ($scrollToElements == null ? void 0 : $scrollToElements.length) && $scrollToElements.forEach($el => {\n      $el.removeEventListener('click', this._onScrollToBind, false);\n    });\n  }\n  /**\r\n   * Callback - Resize callback.\r\n   */\n  _onResize() {\n    // Waiting the next frame to get the new current scroll value return by Lenis\n    requestAnimationFrame(() => {\n      var _this$coreInstance;\n      (_this$coreInstance = this.coreInstance) == null ? void 0 : _this$coreInstance.onResize({\n        currentScroll: this.lenisInstance.scroll\n      });\n    });\n  }\n  /**\r\n   * Callback - Render callback.\r\n   */\n  _onRender() {\n    var _this$lenisInstance2, _this$coreInstance2;\n    (_this$lenisInstance2 = this.lenisInstance) == null ? void 0 : _this$lenisInstance2.raf(Date.now());\n    (_this$coreInstance2 = this.coreInstance) == null ? void 0 : _this$coreInstance2.onRender({\n      currentScroll: this.lenisInstance.scroll,\n      smooth: this.lenisInstance.isSmooth\n    });\n  }\n  /**\r\n   * Callback - Scroll To callback.\r\n   */\n  _onScrollTo(event) {\n    var _event$currentTarget;\n    event.preventDefault();\n    const $target = (_event$currentTarget = event.currentTarget) != null ? _event$currentTarget : null;\n    if (!$target) return;\n    const target = $target.getAttribute('data-scroll-to-href') || $target.getAttribute('href');\n    const offset = $target.getAttribute('data-scroll-to-offset') || 0;\n    const duration = $target.getAttribute('data-scroll-to-duration') || this.lenisOptions.duration || defaultLenisOptions.duration;\n    target && this.scrollTo(target, {\n      offset: typeof offset === 'string' ? parseInt(offset) : offset,\n      duration: typeof duration === 'string' ? parseInt(duration) : duration\n    });\n  }\n  /**\r\n   * Start RequestAnimationFrame that active Lenis smooth and scroll progress.\r\n   */\n  start() {\n    if (this.rafPlaying) {\n      return;\n    }\n    this.rafPlaying = true;\n    this.initCustomTicker ? this.initCustomTicker(this._onRenderBind) : this._raf();\n  }\n  /**\r\n   * Stop RequestAnimationFrame that active Lenis smooth and scroll progress.\r\n   */\n  stop() {\n    if (!this.rafPlaying) {\n      return;\n    }\n    this.rafPlaying = false;\n    this.destroyCustomTicker ? this.destroyCustomTicker(this._onRenderBind) : this.rafInstance && cancelAnimationFrame(this.rafInstance);\n  }\n  /**\r\n   * Remove old scroll elements items and rebuild ScrollElements instances.\r\n   */\n  removeScrollElements($oldContainer) {\n    var _this$coreInstance3;\n    if (!$oldContainer) {\n      console.error('Please provide a DOM Element as $oldContainer');\n      return;\n    }\n    this._unbindScrollToEvents($oldContainer);\n    (_this$coreInstance3 = this.coreInstance) == null ? void 0 : _this$coreInstance3.removeScrollElements($oldContainer);\n  }\n  /**\r\n   * Add new scroll elements items and rebuild ScrollElements instances.\r\n   */\n  addScrollElements($newContainer) {\n    var _this$coreInstance4;\n    if (!$newContainer) {\n      console.error('Please provide a DOM Element as $newContainer');\n      return;\n    }\n    (_this$coreInstance4 = this.coreInstance) == null ? void 0 : _this$coreInstance4.addScrollElements($newContainer);\n    requestAnimationFrame(() => {\n      this._bindScrollToEvents($newContainer);\n    });\n  }\n  /**\r\n   * Trigger resize callback.\r\n   */\n  resize() {\n    this._onResizeBind();\n  }\n  /**\r\n   * Trigger scroll to callback.\r\n   */\n  scrollTo(target, options) {\n    var _this$lenisInstance3;\n    (_this$lenisInstance3 = this.lenisInstance) == null ? void 0 : _this$lenisInstance3.scrollTo(target, {\n      offset: options == null ? void 0 : options.offset,\n      lerp: options == null ? void 0 : options.lerp,\n      duration: options == null ? void 0 : options.duration,\n      immediate: options == null ? void 0 : options.immediate,\n      lock: options == null ? void 0 : options.lock,\n      force: options == null ? void 0 : options.force,\n      easing: options == null ? void 0 : options.easing,\n      onComplete: options == null ? void 0 : options.onComplete\n    });\n  }\n  /**\r\n   * RequestAnimationFrame that active Lenis smooth and scroll progress.\r\n   *\r\n   * @private\r\n   *\r\n   */\n  _raf() {\n    this._onRenderBind();\n    this.rafInstance = requestAnimationFrame(() => this._raf());\n  }\n}\n\n\n//# sourceMappingURL=locomotive-scroll.modern.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/locomotive-scroll/dist/locomotive-scroll.modern.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/locomotive-scroll/node_modules/@studio-freight/lenis/dist/lenis.modern.mjs":
/*!*************************************************************************************************!*\
  !*** ./node_modules/locomotive-scroll/node_modules/@studio-freight/lenis/dist/lenis.modern.mjs ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ l)\n/* harmony export */ });\nfunction t(){return t=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var i=arguments[e];for(var s in i)Object.prototype.hasOwnProperty.call(i,s)&&(t[s]=i[s])}return t},t.apply(this,arguments)}function e(t,e,i){return Math.max(t,Math.min(e,i))}class i{advance(t){var i;if(!this.isRunning)return;let s=!1;if(this.lerp)this.value=(1-(o=this.lerp))*this.value+o*this.to,Math.round(this.value)===this.to&&(this.value=this.to,s=!0);else{this.currentTime+=t;const i=e(0,this.currentTime/this.duration,1);s=i>=1;const o=s?1:this.easing(i);this.value=this.from+(this.to-this.from)*o}var o;null==(i=this.onUpdate)||i.call(this,this.value,{completed:s}),s&&this.stop()}stop(){this.isRunning=!1}fromTo(t,e,{lerp:i=.1,duration:s=1,easing:o=(t=>t),onUpdate:n}){this.from=this.value=t,this.to=e,this.lerp=i,this.duration=s,this.easing=o,this.currentTime=0,this.isRunning=!0,this.onUpdate=n}}function s(t,e){let i;return function(){let s=arguments,o=this;clearTimeout(i),i=setTimeout(function(){t.apply(o,s)},e)}}class o{constructor(t,e){this.onWindowResize=()=>{this.width=window.innerWidth,this.height=window.innerHeight},this.onWrapperResize=()=>{this.width=this.wrapper.clientWidth,this.height=this.wrapper.clientHeight},this.onContentResize=()=>{const t=this.wrapper===window?document.documentElement:this.wrapper;this.scrollHeight=t.scrollHeight,this.scrollWidth=t.scrollWidth},this.wrapper=t,this.content=e,this.wrapper===window?(window.addEventListener(\"resize\",this.onWindowResize,!1),this.onWindowResize()):(this.wrapperResizeObserver=new ResizeObserver(s(this.onWrapperResize,100)),this.wrapperResizeObserver.observe(this.wrapper),this.onWrapperResize()),this.contentResizeObserver=new ResizeObserver(s(this.onContentResize,100)),this.contentResizeObserver.observe(this.content),this.onContentResize()}destroy(){var t,e;window.removeEventListener(\"resize\",this.onWindowResize,!1),null==(t=this.wrapperResizeObserver)||t.disconnect(),null==(e=this.contentResizeObserver)||e.disconnect()}get limit(){return{x:this.scrollWidth-this.width,y:this.scrollHeight-this.height}}}let n=()=>({events:{},emit(t,...e){let i=this.events[t]||[];for(let t=0,s=i.length;t<s;t++)i[t](...e)},on(t,e){var i;return(null==(i=this.events[t])?void 0:i.push(e))||(this.events[t]=[e]),()=>{var i;this.events[t]=null==(i=this.events[t])?void 0:i.filter(t=>e!==t)}}});class r{constructor(t,{wheelMultiplier:i=1,touchMultiplier:s=2,normalizeWheel:o=!1}){this.onTouchStart=t=>{const{clientX:e,clientY:i}=t.targetTouches?t.targetTouches[0]:t;this.touchStart.x=e,this.touchStart.y=i,this.lastDelta={x:0,y:0}},this.onTouchMove=t=>{const{clientX:e,clientY:i}=t.targetTouches?t.targetTouches[0]:t,s=-(e-this.touchStart.x)*this.touchMultiplier,o=-(i-this.touchStart.y)*this.touchMultiplier;this.touchStart.x=e,this.touchStart.y=i,this.lastDelta={x:s,y:o},this.emitter.emit(\"scroll\",{type:\"touch\",deltaX:s,deltaY:o,event:t})},this.onTouchEnd=t=>{this.emitter.emit(\"scroll\",{type:\"touch\",inertia:!0,deltaX:this.lastDelta.x,deltaY:this.lastDelta.y,event:t})},this.onWheel=t=>{let{deltaX:i,deltaY:s}=t;this.normalizeWheel&&(i=e(-100,i,100),s=e(-100,s,100)),i*=this.wheelMultiplier,s*=this.wheelMultiplier,this.emitter.emit(\"scroll\",{type:\"wheel\",deltaX:i,deltaY:s,event:t})},this.element=t,this.wheelMultiplier=i,this.touchMultiplier=s,this.normalizeWheel=o,this.touchStart={x:null,y:null},this.emitter=n(),this.element.addEventListener(\"wheel\",this.onWheel,{passive:!1}),this.element.addEventListener(\"touchstart\",this.onTouchStart,{passive:!1}),this.element.addEventListener(\"touchmove\",this.onTouchMove,{passive:!1}),this.element.addEventListener(\"touchend\",this.onTouchEnd,{passive:!1})}on(t,e){return this.emitter.on(t,e)}destroy(){this.emitter.events={},this.element.removeEventListener(\"wheel\",this.onWheel,{passive:!1}),this.element.removeEventListener(\"touchstart\",this.onTouchStart,{passive:!1}),this.element.removeEventListener(\"touchmove\",this.onTouchMove,{passive:!1}),this.element.removeEventListener(\"touchend\",this.onTouchEnd,{passive:!1})}}class l{constructor({direction:e,gestureDirection:s,mouseMultiplier:l,smooth:h,wrapper:a=window,content:c=document.documentElement,wheelEventsTarget:u=a,smoothWheel:p=null==h||h,smoothTouch:d=!1,syncTouch:m=!1,syncTouchLerp:v=.1,touchInertiaMultiplier:g=35,duration:S,easing:w=(t=>Math.min(1,1.001-Math.pow(2,-10*t))),lerp:f=(S?null:.1),infinite:y=!1,orientation:T=(null!=e?e:\"vertical\"),gestureOrientation:z=(null!=s?s:\"vertical\"),touchMultiplier:M=1,wheelMultiplier:E=(null!=l?l:1),normalizeWheel:L=!1}={}){this.onVirtualScroll=({type:e,inertia:i,deltaX:s,deltaY:o,event:n})=>{if(n.ctrlKey)return;const r=\"touch\"===e,l=\"wheel\"===e;if(\"vertical\"===this.options.gestureOrientation&&0===o||\"horizontal\"===this.options.gestureOrientation&&0===s||r&&\"vertical\"===this.options.gestureOrientation&&0===this.scroll&&!this.options.infinite&&o<=0)return;if(n.composedPath().find(t=>null==t||null==t.hasAttribute?void 0:t.hasAttribute(\"data-lenis-prevent\")))return;if(this.isStopped||this.isLocked)return void n.preventDefault();if(this.isSmooth=(this.options.smoothTouch||this.options.syncTouch)&&r||this.options.smoothWheel&&l,!this.isSmooth)return this.isScrolling=!1,void this.animate.stop();n.preventDefault();let h=o;\"both\"===this.options.gestureOrientation?h=Math.abs(o)>Math.abs(s)?o:s:\"horizontal\"===this.options.gestureOrientation&&(h=s);const a=r&&this.options.syncTouch,c=r&&i&&Math.abs(h)>1;c&&(h=this.velocity*this.options.touchInertiaMultiplier),this.scrollTo(this.targetScroll+h,t({programmatic:!1},a&&{lerp:c?this.syncTouchLerp:.4}))},this.onScroll=()=>{if(!this.isScrolling){const t=this.animatedScroll;this.animatedScroll=this.targetScroll=this.actualScroll,this.velocity=0,this.direction=Math.sign(this.animatedScroll-t),this.emit()}},e&&console.warn(\"Lenis: `direction` option is deprecated, use `orientation` instead\"),s&&console.warn(\"Lenis: `gestureDirection` option is deprecated, use `gestureOrientation` instead\"),l&&console.warn(\"Lenis: `mouseMultiplier` option is deprecated, use `wheelMultiplier` instead\"),h&&console.warn(\"Lenis: `smooth` option is deprecated, use `smoothWheel` instead\"),window.lenisVersion=\"1.0.11\",a!==document.documentElement&&a!==document.body||(a=window),this.options={wrapper:a,content:c,wheelEventsTarget:u,smoothWheel:p,smoothTouch:d,syncTouch:m,syncTouchLerp:v,touchInertiaMultiplier:g,duration:S,easing:w,lerp:f,infinite:y,gestureOrientation:z,orientation:T,touchMultiplier:M,wheelMultiplier:E,normalizeWheel:L},this.dimensions=new o(a,c),this.rootElement.classList.add(\"lenis\"),this.velocity=0,this.isStopped=!1,this.isSmooth=p||d,this.isScrolling=!1,this.targetScroll=this.animatedScroll=this.actualScroll,this.animate=new i,this.emitter=n(),this.options.wrapper.addEventListener(\"scroll\",this.onScroll,{passive:!1}),this.virtualScroll=new r(u,{touchMultiplier:M,wheelMultiplier:E,normalizeWheel:L}),this.virtualScroll.on(\"scroll\",this.onVirtualScroll)}destroy(){this.emitter.events={},this.options.wrapper.removeEventListener(\"scroll\",this.onScroll,{passive:!1}),this.virtualScroll.destroy()}on(t,e){return this.emitter.on(t,e)}off(t,e){var i;this.emitter.events[t]=null==(i=this.emitter.events[t])?void 0:i.filter(t=>e!==t)}setScroll(t){this.isHorizontal?this.rootElement.scrollLeft=t:this.rootElement.scrollTop=t}emit(){this.emitter.emit(\"scroll\",this)}reset(){this.isLocked=!1,this.isScrolling=!1,this.velocity=0,this.animate.stop()}start(){this.isStopped=!1,this.reset()}stop(){this.isStopped=!0,this.animate.stop(),this.reset()}raf(t){const e=t-(this.time||t);this.time=t,this.animate.advance(.001*e)}scrollTo(t,{offset:i=0,immediate:s=!1,lock:o=!1,duration:n=this.options.duration,easing:r=this.options.easing,lerp:l=!n&&this.options.lerp,onComplete:h=null,force:a=!1,programmatic:c=!0}={}){if(!this.isStopped||a){if([\"top\",\"left\",\"start\"].includes(t))t=0;else if([\"bottom\",\"right\",\"end\"].includes(t))t=this.limit;else{var u;let e;if(\"string\"==typeof t?e=document.querySelector(t):null!=(u=t)&&u.nodeType&&(e=t),e){if(this.options.wrapper!==window){const t=this.options.wrapper.getBoundingClientRect();i-=this.isHorizontal?t.left:t.top}const s=e.getBoundingClientRect();t=(this.isHorizontal?s.left:s.top)+this.animatedScroll}}if(\"number\"==typeof t){if(t+=i,t=Math.round(t),this.options.infinite?c&&(this.targetScroll=this.animatedScroll=this.scroll):t=e(0,t,this.limit),s)return this.animatedScroll=this.targetScroll=t,this.setScroll(this.scroll),this.reset(),this.emit(),void(null==h||h());if(!c){if(t===this.targetScroll)return;this.targetScroll=t}this.animate.fromTo(this.animatedScroll,t,{duration:n,easing:r,lerp:l,onUpdate:(t,{completed:e})=>{o&&(this.isLocked=!0),this.isScrolling=!0,this.velocity=t-this.animatedScroll,this.direction=Math.sign(this.velocity),this.animatedScroll=t,this.setScroll(this.scroll),c&&(this.targetScroll=t),e&&(o&&(this.isLocked=!1),requestAnimationFrame(()=>{this.isScrolling=!1}),this.velocity=0,null==h||h()),this.emit()}})}}}get rootElement(){return this.options.wrapper===window?this.options.content:this.options.wrapper}get limit(){return this.isHorizontal?this.dimensions.limit.x:this.dimensions.limit.y}get isHorizontal(){return\"horizontal\"===this.options.orientation}get actualScroll(){return this.isHorizontal?this.rootElement.scrollLeft:this.rootElement.scrollTop}get scroll(){return this.options.infinite?function(t,e){let i=t%e;return(e>0&&i<0||e<0&&i>0)&&(i+=e),i}(this.animatedScroll,this.limit):this.animatedScroll}get progress(){return 0===this.limit?1:this.scroll/this.limit}get isSmooth(){return this.__isSmooth}set isSmooth(t){this.__isSmooth!==t&&(this.rootElement.classList.toggle(\"lenis-smooth\",t),this.__isSmooth=t)}get isScrolling(){return this.__isScrolling}set isScrolling(t){this.__isScrolling!==t&&(this.rootElement.classList.toggle(\"lenis-scrolling\",t),this.__isScrolling=t)}get isStopped(){return this.__isStopped}set isStopped(t){this.__isStopped!==t&&(this.rootElement.classList.toggle(\"lenis-stopped\",t),this.__isStopped=t)}}\n//# sourceMappingURL=lenis.modern.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/locomotive-scroll/node_modules/@studio-freight/lenis/dist/lenis.modern.mjs\n");

/***/ })

};
;